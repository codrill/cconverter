{"version":3,"sources":["components/headerNavLink/headerNavLink.module.scss","components/changeLanguage/changeLanguage.module.scss","components/about/about.tsx","constants/regex.ts","components/contactForm/contactForm.tsx","constants/emailJS.ts","components/contactFormSent/contactFormSent.tsx","components/contact/contact.tsx","constants/urls.ts","config/routes.ts","components/notFoundPage/notFoundPage.tsx","components/headerNavLink/headerNavLink.tsx","config/languages.ts","assets/img/flag-polish.svg","assets/img/flag-english.svg","components/changeLanguage/changeLanguage.tsx","components/mainHeader/mainHeader.tsx","constants/currencyApi.ts","constants/polishCurrencyObject.ts","utils/array.ts","utils/object.ts","utils/fetch.ts","services/currencyService.ts","utils/number.ts","components/currencySelect/currencySelect.tsx","constants/chart.ts","components/chart/chart.tsx","components/exchangeRateHistory/exchangeRateHistory.tsx","utils/chart.ts","components/dashboard/dashboard.tsx","constants/variables.ts","components/dashboard/dashboard.container.tsx","constants/googleAnalytics.ts","components/googleAnalytics/googleAnalytics.tsx","App.tsx","serviceWorker.tsx","i18n.ts","index.tsx","components/contactFormSent/contactFormSent.module.scss","components/notFoundPage/notFoundPage.module.scss","components/exchangeRateHistory/exchangeRateHistory.module.scss"],"names":["module","exports","About","t","useTranslation","className","Helmet","Trans","i18nKey","components","paragraph","bold","usernameRegex","RegExp","emailRegex","ContactForm","onMessageSent","useState","buttonDisabled","setButtonDisabled","name","id","onFinish","values","emailjs","send","then","message","loading","success","error","finally","layout","Item","label","hasFeedback","rules","required","pattern","min","max","TextArea","type","size","htmlType","disabled","ContactFormSent","styles","contactFormSent","Contact","sent","setSent","href","isSent","menuRoutes","path","NotFoundPage","activeLocation","useLocation","history","useHistory","notFound","notFound__info","notFound__header","notFound__subheader","notFound__description","notFound__path","pathname","onClick","push","notFound__img","HeaderNavLink","icon","route","navLink","activeClassName","active","to","navLink__label","data-hover","configuredLanguages","code","Option","Select","ChangeLanguage","i18n","changeLanguage","htmlFor","language__select","dropdownClassName","language__dropdown","showArrow","aria-expanded","defaultValue","language","onChange","lang","map","item","key","value","src","alt","MainHeader","menuExpanded","setMenuExpanded","previousExpandedState","urlNbpApi","urlExchangeRates","urlApiNBPTableA","urlApiNBPTableB","urlApiNBPMaxHistory","currencyTable","currencyCode","polishCurrencyObject","currency","mid","sort","propertyToSortBy","a","b","String","toLowerCase","addNewPropertyToTableObjectElement","objects","newProperty","newPropertyValue","forEach","objectElement","request$","url","from","fetch","data","json","useCurrenciesFetch","rates","setRates","date","setDate","useEffect","forkJoin","currencyTableA","currencyTableB","pipe","tableAElement","table","tableBElement","effectiveDate","returnPreparedCurrencyObject","subscribe","prepareHistoryData","firstCurrency","divideByCurrency","secondCurrency","historyData","rate","index","Number","toFixed","getParsedNumber","replace","CurrencySelect","props","currencyRates","dropdownVisible","setDropdownVisible","showSearch","placeholder","optionFilterProp","onDropdownVisibleChange","open","filterOption","inputValue","option","children","indexOf","renderOptionsInSelector","defaultChartColors","Chart","chartData","bgColors","canvas","gradient","getContext","createLinearGradient","colorHex","currentColorOffset","length","addColorStop","datasets","backgroundColor","options","responsive","maintainAspectRatio","legend","scales","yAxes","gridLines","display","xAxes","THIRTY_DAYS_PERIOD","SIXTY_DAYS_PERIOD","NINETY_DAYS_PERIOD","ExchangeRateHistoryComponent","selectedCurrencies","backToDashboard","period","setPeriod","setChartData","GetHistoricalData","slice","labels","dataArray","prepareChartLabels","translatedLabel","setChart","historyRate","spinning","periodButtons","activePeriod","monthButton","shape","setData","setLoading","selectedPolishCurrencyIndex","findIndex","secondSelectedCurrency","useFetchHistoryData","userInputRegex","Dashboard","dataReady","fromCurrency","setFromCurrency","toCurrency","setToCurrency","userValue","setUserValue","converterValue","setConvertedValue","exchangeRate","setExchangeRate","setSelectedCurrencies","isDashboardComponentActive","setDashboardComponentActive","isHistoryComponentActive","setHistoryComponentActive","setInitialCurrencies","firstValue","find","secondValue","toString","findAndReturnCurrencyByCode","switchView","setDashboardActive","setHistoryActive","delay","inputElement","target","test","temporaryFromCurrencyKeeper","rotate","DashboardContainer","gtagID","process","GoogleAnalytics","gtag","async","Header","Layout","Content","App","basename","exact","Boolean","window","location","hostname","match","resources","en","translation","pl","use","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b4c60c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"headerNavLink_navLink__1aV-U\",\"navLink__label\":\"headerNavLink_navLink__label__2S-fb\",\"active\":\"headerNavLink_active__MqfRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"changeLanguage\":\"changeLanguage_changeLanguage__xok4b\",\"language__select\":\"changeLanguage_language__select__1AMl2\",\"language__dropdown\":\"changeLanguage_language__dropdown__2WNJE\"};","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Trans, useTranslation } from 'react-i18next'\n\nimport './about.scss'\n\nexport const About: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div className=\"about\">\n      <Helmet>\n        <title>CConverter - {t('AboutHelmetTitle')}</title>\n      </Helmet>\n\n      <div className=\"about-layout\">\n        <div className=\"about-layout__item\">\n          <div className=\"about-layout__info\">\n            <Trans i18nKey=\"AboutSectionHowToUse\" components={{ paragraph: <p />, bold: <strong /> }}>\n              <p>\n                <strong>CConverter</strong> is an open-source project created by <strong>Codrill</strong>. Having at\n                your disposal 150 currencies from all over the world, conversions become very simple.\n              </p>\n              <p>\n                It only takes choosing currencies you&apos;re interested in and specify the number. This application\n                will automatically convert given amount, basing on adequate and official exchange rates.\n              </p>\n            </Trans>\n          </div>\n\n          <div className=\"about-layout__foto dollar-foto\" />\n        </div>\n        <div className=\"about-layout__item\">\n          <div className=\"about-layout__foto bank-foto\" />\n\n          <div className=\"about-layout__info\">\n            <p>\n              <Trans i18nKey=\"AboutSectionNBP\">\n                In order to guarantee our users reliable and official exchange rates we use data provided by the\n                <strong>National Bank of Poland</strong>, where the most popular values are upgraded every working day\n                and more exotic ones every Wednesday.\n              </Trans>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"about-layout__item\">\n          <div className=\"about-layout__info\">\n            <Trans i18nKey=\"AboutSectionRWD\" components={{ paragraph: <p />, bold: <strong /> }}>\n              <p>\n                Our converter is adjusted to be used on any device. Do you need a quick conversion? This app works\n                flawlessly on both mobile phones and tablets.\n              </p>\n              <p>\n                <strong>CConverter</strong> is continuously developed. We therefore encourage you to share your thoughts\n                using our application form.\n              </p>\n            </Trans>\n          </div>\n\n          <div className=\"about-layout__foto rwd-foto\" />\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const usernameRegex = new RegExp(/^[a-zA-Z\\s]*$/)\nexport const emailRegex = new RegExp(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)\n","import { Form, message } from 'antd'\nimport Button from 'antd/lib/button'\nimport Input from 'antd/lib/input'\nimport emailjs from 'emailjs-com'\nimport React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { defaultService, templateId, userId } from '../../constants/emailJS'\nimport { emailRegex, usernameRegex } from '../../constants/regex'\n\nimport './contactForm.scss'\n\ntype FormValues = {\n  username: string\n  userEmail: string\n  userMessage: string\n}\n\ntype ContactFormProps = {\n  onMessageSent: (isSent: boolean) => void\n}\n\nexport const ContactForm: React.FC<ContactFormProps> = ({ onMessageSent }) => {\n  const { t } = useTranslation()\n  const [buttonDisabled, setButtonDisabled] = useState<boolean>(false)\n\n  const submitForm = (values: FormValues): void => {\n    setButtonDisabled(true)\n\n    emailjs\n      .send(defaultService, templateId, values, userId)\n      .then(message.loading(`${t('ContactFormSendingMessage')}`))\n      .then(\n        () => {\n          message.success(`${t('ContactFormMessageSent')}`, 10)\n          onMessageSent(true)\n        },\n        () => {\n          message.error(`${t('ContactFormMessageError')}`, 10)\n        },\n      )\n      .finally(() => setButtonDisabled(false))\n  }\n\n  return (\n    <>\n      <h1>{t('ContactFormHeader')}</h1>\n      <div className=\"form\">\n        <Form<FormValues> name=\"contactForm\" id=\"contact-form\" onFinish={submitForm} layout=\"vertical\">\n          <Form.Item\n            label={t('ContactFormUsername')}\n            name=\"username\"\n            hasFeedback\n            rules={[\n              { required: true, message: `${t('ContactFormRequiredField')}` },\n              { pattern: usernameRegex, message: `${t('ContactFormRegexUsername')}` },\n              { min: 5, message: `${t('ContactFormRegexUsername')}` },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label={t('ContactFormEmail')}\n            name=\"userEmail\"\n            hasFeedback\n            rules={[\n              { required: true, message: `${t('ContactFormRequiredField')}` },\n              { pattern: emailRegex, message: `${t('ContactFormRegexEmail')}` },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            className=\"text-area\"\n            label={t('ContactFormMessage')}\n            name=\"userMessage\"\n            hasFeedback\n            rules={[\n              { required: true, message: `${t('ContactFormRequiredField')}` },\n              { min: 20, message: `${t('ContactFormRegexMessage')}` },\n              { max: 500, message: `${t('ContactFormRegexMessage')}` },\n            ]}\n          >\n            <Input.TextArea />\n          </Form.Item>\n          <Form.Item className=\"submitButton\">\n            <Button\n              type=\"primary\"\n              size=\"large\"\n              htmlType=\"submit\"\n              disabled={buttonDisabled}\n              className=\"cc-btn--gradient\"\n            >\n              <span>{t('ContactFormSendButton')}</span>\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  )\n}\n","export const defaultService = 'default_service'\nexport const templateId = 'template_RlMHIKsz'\nexport const userId = 'user_WJzAGe4DbegjX0ajICAky'\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport styles from './contactFormSent.module.scss'\n\nexport const ContactFormSent: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <h1>{t('ContactFormSentHeader')}</h1>\n      <div className={styles.contactFormSent}>\n        <p>{t('ContactFormSentSuccess')}</p>\n        <p>{t('ContactFormSentResponse')}</p>\n      </div>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { FacebookOutlined, GithubOutlined, GlobalOutlined } from '@ant-design/icons/lib'\nimport { Helmet } from 'react-helmet'\n\nimport { ContactForm } from '../contactForm/contactForm'\nimport { ContactFormSent } from '../contactFormSent/contactFormSent'\nimport { codrillWebsite, facebookProfile, githubProfile } from '../../constants/urls'\n\nimport './contact.scss'\n\nexport const Contact: React.FC = () => {\n  const { t } = useTranslation()\n  const [sent, setSent] = useState<boolean>(false)\n\n  function handleMessageSent(isSent: boolean) {\n    setSent(isSent)\n  }\n\n  return (\n    <div className=\"contact\">\n      <Helmet>\n        <title>CConverter - {t('ContactHelmetTitle')}</title>\n      </Helmet>\n\n      <div className=\"contact__details\">\n        <h2>{t('ContactInformation')}</h2>\n\n        <div className=\"contact__details__icons\">\n          <div className=\"contact__details__icon facebook\">\n            <a href={facebookProfile}>\n              <FacebookOutlined />\n            </a>\n          </div>\n\n          <div className=\"contact__details__icon site\">\n            <a href={codrillWebsite}>\n              <GlobalOutlined />\n            </a>\n          </div>\n\n          <div className=\"contact__details__icon github\">\n            <a href={githubProfile}>\n              <GithubOutlined />\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"contact__form\">\n        {!sent ? <ContactForm onMessageSent={handleMessageSent} /> : <ContactFormSent />}\n      </div>\n    </div>\n  )\n}\n","export const codrillWebsite = 'https://codrill.pl'\nexport const facebookProfile = 'https://www.facebook.com/Codrill-100150344838464/'\nexport const githubProfile = 'https://github.com/codrill'\n","type MenuRoutes = {\n  home: () => MenuRoute\n  about: () => MenuRoute\n  contact: () => MenuRoute\n  history: () => MenuRoute\n}\n\ntype MenuRoute = {\n  path: string\n  label: string\n}\n\nexport const menuRoutes: MenuRoutes = {\n  home: () => ({ path: '/', label: 'CConverter' }),\n  about: () => ({ path: '/about', label: 'About' }),\n  contact: () => ({ path: '/contact', label: 'Contact' }),\n  history: () => ({ path: '/history', label: 'History' }),\n}\n","import React from 'react'\nimport { Button } from 'antd'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\n\nimport { menuRoutes } from '../../config/routes'\n\nimport styles from './notFoundPage.module.scss'\n\nexport const NotFoundPage: React.FC = () => {\n  const activeLocation = useLocation()\n  const history = useHistory()\n  const { t } = useTranslation()\n\n  function goHomeHandler() {\n    history.push(menuRoutes.home().path)\n  }\n\n  return (\n    <div className={`cc-container ${styles.notFound}`}>\n      <div className={styles.notFound__info}>\n        <h1 className={styles.notFound__header}>404</h1>\n        <h2 className={styles.notFound__subheader}>{t('NotFoundPageSubheader')}</h2>\n        <p className={styles.notFound__description}>\n          <span>{t('NotFoundPageDescription')}</span>\n          <span className={styles.notFound__path}>{activeLocation.pathname}</span>\n        </p>\n\n        <Button type=\"primary\" className=\"cc-btn--gradient\" onClick={goHomeHandler}>\n          {t('NotFoundPageBtnHome')}\n        </Button>\n      </div>\n      <div className={styles.notFound__img} />\n    </div>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\n\nimport styles from './headerNavLink.module.scss'\n\ntype Props = {\n  icon: ReactElement\n  route: { path: string; label: string }\n}\n\nexport const HeaderNavLink: React.FC<Props> = ({ icon, route }) => {\n  const { t } = useTranslation()\n\n  return (\n    <li className={styles.navLink}>\n      <NavLink activeClassName={styles.active} to={route.path}>\n        {icon}\n        <span className={styles.navLink__label} data-hover={t(route.label)}>\n          {t(route.label)}\n        </span>\n      </NavLink>\n    </li>\n  )\n}\n","import polish from '../assets/img/flag-polish.svg'\nimport english from '../assets/img/flag-english.svg'\n\ntype ConfiguredLanguage = {\n  code: string\n  icon: string\n  name: string\n}\nexport const configuredLanguages: ConfiguredLanguage[] = [\n  {\n    code: 'pl',\n    icon: polish,\n    name: 'Polski',\n  },\n  {\n    code: 'en',\n    icon: english,\n    name: 'English',\n  },\n]\n","export default __webpack_public_path__ + \"static/media/flag-polish.602a7f84.svg\";","export default __webpack_public_path__ + \"static/media/flag-english.14458eff.svg\";","import React from 'react'\nimport { Select } from 'antd'\nimport { useTranslation } from 'react-i18next'\n\nimport { configuredLanguages } from '../../config/languages'\n\nimport styles from './changeLanguage.module.scss'\n\ntype AvailableLanguageCodes = 'pl' | 'en'\nconst { Option } = Select\n\nexport const ChangeLanguage: React.FC = () => {\n  const { t, i18n } = useTranslation()\n\n  const onLanguageChange = (lang: AvailableLanguageCodes) => i18n.changeLanguage(lang)\n\n  return (\n    <div className={styles.changeLanguage}>\n      <label htmlFor=\"languageSelect\" className=\"sr-only\">\n        {t('SelectLanguageLabel')}\n      </label>\n      <Select\n        className={styles.language__select}\n        id=\"languageSelect\"\n        dropdownClassName={styles.language__dropdown}\n        showArrow={false}\n        aria-expanded=\"false\"\n        defaultValue={i18n.language as AvailableLanguageCodes}\n        onChange={onLanguageChange}\n      >\n        {configuredLanguages.map((item) => (\n          <Option key={item.name} value={item.code}>\n            <img src={item.icon} alt={item.name} />\n            <span>{item.name}</span>\n          </Option>\n        ))}\n      </Select>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { BuildFilled, ContainerFilled } from '@ant-design/icons/lib'\nimport { useTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport { menuRoutes } from '../../config/routes'\nimport { HeaderNavLink } from '../headerNavLink/headerNavLink'\nimport { ChangeLanguage } from '../changeLanguage/changeLanguage'\n\nimport './mainHeader.scss'\n\nexport const MainHeader: React.FC = () => {\n  const { t } = useTranslation()\n\n  const [menuExpanded, setMenuExpanded] = useState<boolean>(false)\n\n  const onMenuToggle = () => {\n    setMenuExpanded((previousExpandedState) => !previousExpandedState)\n  }\n\n  return (\n    <div className=\"main-header cc-container\">\n      <h1 className=\"main-header__logo\">\n        <Link to={menuRoutes.home().path}>\n          {menuRoutes.home().label}\n          <span>{t('FX Rate')}</span>\n        </Link>\n      </h1>\n      <div className={`main-header__hamburger ${menuExpanded ? 'active' : ''}`} onClick={onMenuToggle}>\n        <span className=\"line\" />\n        <span className=\"line\" />\n        <span className=\"line\" />\n      </div>\n      <ul className=\"main-header__menu\">\n        <HeaderNavLink icon={<BuildFilled />} route={menuRoutes.about()} />\n        <HeaderNavLink icon={<ContainerFilled />} route={menuRoutes.contact()} />\n      </ul>\n      <ChangeLanguage />\n    </div>\n  )\n}\n","import { AvailableTables } from '../components/dashboard/dashboard'\n\nconst urlNbpApi = 'https://api.nbp.pl/api'\n\nexport const urlExchangeRates = `${urlNbpApi}/exchangerates/rates`\n\nexport const urlApiNBPTableA = `${urlNbpApi}/exchangerates/tables/A`\nexport const urlApiNBPTableB = `${urlNbpApi}/exchangerates/tables/B`\n\nexport const urlApiNBPMaxHistory = (currencyTable: AvailableTables, currencyCode: string): string => {\n  return `${urlExchangeRates}/${currencyTable}/${currencyCode}/last/90`\n}\n","export const polishCurrencyObject = {\n  currency: 'polski złoty',\n  code: 'PLN',\n  mid: 1.0,\n}\n\nexport const polishCurrencyCode = 'PLN'\n","export const sort = <T>(values: Record<string, T>[], propertyToSortBy = ''): Record<string, T>[] => {\n  if (propertyToSortBy in values[0])\n    return values.sort((a, b) => {\n      return String(a[propertyToSortBy]).toLowerCase() < String(b[propertyToSortBy]).toLowerCase() ? -1 : 1\n    })\n\n  return values.sort((a, b) => (a < b ? -1 : 1))\n}\n","import { polishCurrencyObject } from 'constants/polishCurrencyObject'\nimport { CurrencyObject, CurrencyResponse } from 'services/currencyService'\n\nimport { sort } from './array'\n\nexport function addNewPropertyToTableObjectElement(\n  objects: Record<string, unknown>[],\n  newProperty: string,\n  newPropertyValue: string,\n): void {\n  //TODO: can we return new object here to omit mutability and set proper typings?\n  objects.forEach((objectElement) => {\n    objectElement[newProperty] = newPropertyValue\n  })\n}\n\nexport function returnPreparedCurrencyObject(data: CurrencyResponse): CurrencyObject {\n  data.currencyTableA.forEach((tableAElement) => {\n    addNewPropertyToTableObjectElement(tableAElement.rates, 'table', tableAElement.table)\n  })\n  data.currencyTableB.forEach((tableBElement) => {\n    addNewPropertyToTableObjectElement(tableBElement.rates, 'table', tableBElement.table)\n  })\n  return {\n    rates: sort([...data.currencyTableA[0].rates, ...data.currencyTableB[0].rates, polishCurrencyObject], 'currency'),\n    date: data.currencyTableA[0].effectiveDate,\n  } as CurrencyObject\n}\n","import { from, Observable } from 'rxjs'\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const request$ = (url: string): Observable<any> => {\n  return from(fetch(url).then((data) => data.json()))\n}\n","import { useEffect, useState } from 'react'\nimport { forkJoin } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { ApiRate, CurrencyHistoryData } from '../components/dashboard/dashboard'\nimport { urlApiNBPMaxHistory, urlApiNBPTableA, urlApiNBPTableB } from '../constants/currencyApi'\nimport { polishCurrencyCode, polishCurrencyObject } from '../constants/polishCurrencyObject'\nimport { returnPreparedCurrencyObject } from '../utils/object'\nimport { request$ } from '../utils/fetch'\n\nexport interface CurrencyResponse {\n  currencyTableA: CurrencyTableObject[]\n  currencyTableB: CurrencyTableObject[]\n}\n\nexport interface CurrencyTableObject {\n  table: string\n  currency: string\n  code: string\n  rates: ApiRate[]\n  effectiveDate: string\n}\n\nexport interface HistoryData {\n  date: string\n  rate: number\n}\n\nexport type CurrencyObject = {\n  rates: ApiRate[]\n  date: string\n}\n\nexport type Currency = {\n  no: string\n  effectiveDate: string\n  mid: number\n}\n\ntype HistoricalData = {\n  data: HistoryData[]\n  loading: boolean\n}\n\nexport const useCurrenciesFetch = (): CurrencyObject => {\n  const [rates, setRates] = useState<ApiRate[]>([])\n  const [date, setDate] = useState('')\n\n  useEffect(() => {\n    forkJoin({\n      currencyTableA: request$(urlApiNBPTableA),\n      currencyTableB: request$(urlApiNBPTableB),\n    })\n      .pipe(\n        map((data) => {\n          return returnPreparedCurrencyObject(data)\n        }),\n      )\n      .subscribe(({ rates, date }) => {\n        setRates(rates)\n        setDate(date)\n      })\n  }, [])\n\n  return { rates, date }\n}\n\nconst NO_ELEMENT_FOUND_INDEX = -1\n\nexport const useFetchHistoryData = (selectedCurrencies: CurrencyHistoryData[]): HistoricalData => {\n  const [data, setData] = useState<HistoryData[]>([])\n  const [loading, setLoading] = useState<boolean>(true)\n\n  const selectedPolishCurrencyIndex = selectedCurrencies.findIndex((currency) => currency.code === polishCurrencyCode)\n\n  useEffect(() => {\n    if (selectedPolishCurrencyIndex === NO_ELEMENT_FOUND_INDEX) {\n      forkJoin({\n        firstCurrency: request$(urlApiNBPMaxHistory(selectedCurrencies[0]?.table, selectedCurrencies[0]?.code)),\n        secondCurrency: request$(urlApiNBPMaxHistory(selectedCurrencies[1]?.table, selectedCurrencies[1]?.code)),\n      }).subscribe(({ firstCurrency, secondCurrency }) => {\n        setData(prepareHistoryData(firstCurrency.rates, false, secondCurrency.rates))\n        setLoading(false)\n      })\n    }\n\n    if (selectedPolishCurrencyIndex > NO_ELEMENT_FOUND_INDEX) {\n      const secondSelectedCurrency = selectedCurrencies[selectedPolishCurrencyIndex === 0 ? 1 : 0]\n\n      request$(urlApiNBPMaxHistory(secondSelectedCurrency?.table, secondSelectedCurrency?.code)).subscribe(\n        (currency) => {\n          setData(prepareHistoryData(currency.rates, !selectedPolishCurrencyIndex))\n          setLoading(false)\n        },\n      )\n    }\n  }, [selectedCurrencies, selectedPolishCurrencyIndex])\n\n  return { data, loading }\n}\n\nconst prepareHistoryData = (firstCurrency: Currency[], divideByCurrency = false, secondCurrency?: Currency[]) => {\n  const historyData: HistoryData[] = []\n\n  if (firstCurrency && secondCurrency) {\n    firstCurrency.forEach((rate, index) => {\n      return historyData.push({\n        date: rate.effectiveDate,\n        rate: (rate.mid = Number((rate.mid / secondCurrency[index].mid).toFixed(5))),\n      })\n    })\n  } else {\n    firstCurrency.forEach((rate) => {\n      if (divideByCurrency) {\n        return historyData.push({\n          date: rate.effectiveDate,\n          rate: (rate.mid = Number((polishCurrencyObject.mid / rate.mid).toFixed(5))),\n        })\n      }\n      return historyData.push({\n        date: rate.effectiveDate,\n        rate: (rate.mid = Number(rate.mid.toFixed(5))),\n      })\n    })\n  }\n  return historyData\n}\n","export const getParsedNumber = (value: string | number): number => {\n  return Number(String(value).replace(',', '.'))\n}\n","import React, { useState } from 'react'\nimport { Select } from 'antd'\n\nimport { ApiRate } from '../dashboard/dashboard'\n\nconst { Option } = Select\n\ntype Props = {\n  value: string\n  name: string\n  onChange: (value: string) => void\n  currencyRates: ApiRate[]\n  disabled: boolean\n}\n\ntype FilterOption = {\n  props: {\n    children: string\n  }\n}\n\nexport const CurrencySelect: React.FC<Props> = (props) => {\n  const { value, name, onChange, currencyRates, disabled } = props\n\n  const [dropdownVisible, setDropdownVisible] = useState<boolean>(false)\n\n  return (\n    <>\n      <label htmlFor={name} className=\"sr-only\">\n        {name}\n      </label>\n      <Select\n        showSearch\n        value={value}\n        placeholder=\"Select currency\"\n        id={name}\n        size=\"large\"\n        optionFilterProp=\"children\"\n        aria-expanded={dropdownVisible}\n        onDropdownVisibleChange={(open) => setDropdownVisible(open)}\n        onChange={onChange}\n        disabled={disabled}\n        filterOption={(inputValue: string, option: FilterOption) => {\n          return (option?.props.children).toLowerCase().indexOf(inputValue.toLowerCase()) >= 0\n        }}\n      >\n        {renderOptionsInSelector(currencyRates)}\n      </Select>\n    </>\n  )\n}\n\nconst renderOptionsInSelector = (rates: ApiRate[]) => {\n  return rates.map((rate) => {\n    return (\n      <Option value={rate.code} key={rate.code}>\n        {rate.currency}\n      </Option>\n    )\n  })\n}\n","export const defaultChartColors = ['#591de7', '#913A7A']\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\nimport { ChartDataConfig } from '../../utils/chart'\nimport { defaultChartColors } from '../../constants/chart'\n\nimport './chart.scss'\n\ntype Props = {\n  chartData: ChartDataConfig\n  bgColors?: string[]\n}\n\nexport const Chart: React.FC<Props> = ({ chartData, bgColors = defaultChartColors }) => {\n  const data = (canvas: HTMLCanvasElement) => {\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D\n    const gradient = ctx.createLinearGradient(0, 500, 0, 0)\n\n    bgColors.forEach((colorHex, index) => {\n      const currentColorOffset = index / (bgColors.length - 1) // start = 0; end = 1\n      return gradient.addColorStop(currentColorOffset, colorHex)\n    })\n\n    chartData.datasets[0].backgroundColor = gradient\n\n    return {\n      ...chartData,\n    }\n  }\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"line-chart\">\n        <Line\n          data={data}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            legend: {\n              onClick: null,\n            },\n            scales: {\n              yAxes: [\n                {\n                  gridLines: {\n                    display: false,\n                  },\n                },\n              ],\n              xAxes: [\n                {\n                  gridLines: {\n                    display: false,\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Button, Spin } from 'antd'\nimport { CalendarOutlined } from '@ant-design/icons/lib'\nimport { useTranslation } from 'react-i18next'\n\nimport { useFetchHistoryData } from '../../services/currencyService'\nimport { Chart } from '../chart/chart'\nimport { ChartDataConfig, prepareChartLabels, prepareChartValues, setChart } from '../../utils/chart'\nimport { CurrencyHistoryData } from '../dashboard/dashboard'\n\nimport styles from './exchangeRateHistory.module.scss'\n\nconst MAX_DATA_ARRAY_LENGTH = 90\nconst THIRTY_DAYS_PERIOD = { key: 'OneMonth', value: 60 }\nconst SIXTY_DAYS_PERIOD = { key: 'TwoMonths', value: 30 }\nconst NINETY_DAYS_PERIOD = { key: 'ThreeMonths', value: 0 }\n\ntype Props = {\n  selectedCurrencies: CurrencyHistoryData[]\n  backToDashboard: (par1: boolean, par2: boolean) => void\n}\n\nexport const ExchangeRateHistoryComponent: React.FC<Props> = ({ selectedCurrencies, backToDashboard }) => {\n  const { t } = useTranslation()\n\n  const [period, setPeriod] = useState<number>(THIRTY_DAYS_PERIOD.value)\n  const [chartData, setChartData] = useState<ChartDataConfig | null>(null)\n\n  const { data, loading } = GetHistoricalData(selectedCurrencies)\n\n  const generateButton = () => {\n    const allButtons = [THIRTY_DAYS_PERIOD, SIXTY_DAYS_PERIOD, NINETY_DAYS_PERIOD]\n    const setActiveClass = (activePeriod: number) => {\n      return activePeriod === period ? styles.active : ''\n    }\n\n    return allButtons.map(({ key, value }) => {\n      return (\n        <Button\n          className={`${styles.monthButton} ${setActiveClass(value)}`}\n          type=\"primary\"\n          shape=\"round\"\n          icon={<CalendarOutlined />}\n          key={key}\n          onClick={() => {\n            setPeriod(value)\n          }}\n        >\n          {t(key)}\n        </Button>\n      )\n    })\n  }\n\n  useEffect(() => {\n    if (data) {\n      const values = prepareChartValues(data.slice(period, MAX_DATA_ARRAY_LENGTH))\n      const labels = prepareChartLabels(data.slice(period, MAX_DATA_ARRAY_LENGTH))\n      setChartData(setChart(labels, values, t('ExchangeRate')))\n    }\n  }, [data, t, period])\n\n  return (\n    <div className={styles.historyRate}>\n      <Spin spinning={loading}>\n        {!loading && <Chart chartData={chartData as ChartDataConfig} />}\n\n        <div className={styles.periodButtons}>{generateButton()}</div>\n      </Spin>\n\n      <div className={styles.backToDashboard}>\n        <Button type=\"primary\" className=\"btn-chart cc-btn--gradient\" onClick={() => backToDashboard(true, false)}>\n          {t('Back')}\n        </Button>\n      </div>\n    </div>\n  )\n}\n\nconst GetHistoricalData = (selectedCurrencies: CurrencyHistoryData[]) => {\n  const { data, loading } = useFetchHistoryData(selectedCurrencies)\n  return { data, loading }\n}\n","import { HistoryData } from '../services/currencyService'\n\nexport type ChartDataConfig = {\n  labels: string[]\n  datasets: ChartDataset[]\n}\n\ntype ChartDataset = {\n  label: string\n  data: number[]\n  backgroundColor?: string | CanvasGradient\n}\n\nexport const setChart = (labels: string[], values: number[], translatedLabel: string): ChartDataConfig => {\n  return {\n    labels: labels,\n    datasets: [\n      {\n        label: translatedLabel,\n        data: values,\n      },\n    ],\n  }\n}\n\nexport const prepareChartLabels = (dataArray: HistoryData[]): string[] => {\n  return dataArray.map((historyData) => historyData.date)\n}\n\nexport const prepareChartValues = (dataArray: HistoryData[]): number[] => {\n  return dataArray.map((historyData) => historyData.rate)\n}\n","import React, { useEffect, useState } from 'react'\nimport { Button, Input, Spin } from 'antd'\nimport { LineChartOutlined, SwapOutlined } from '@ant-design/icons/lib'\nimport { Helmet } from 'react-helmet'\nimport { Trans, useTranslation } from 'react-i18next'\n\nimport { initialSelectFromValue, initialSelectToValue, inputPlaceholder } from '../../constants/variables'\nimport { getParsedNumber } from '../../utils/number'\nimport { CurrencySelect } from '../currencySelect/currencySelect'\nimport { ExchangeRateHistoryComponent } from '../exchangeRateHistory/exchangeRateHistory'\n\nimport './dashboard.scss'\n\nconst userInputRegex = new RegExp('^\\\\d+([,.]\\\\d{0,2})?$')\n\ntype Props = {\n  rates: ApiRate[]\n  date: string\n  dataReady: boolean\n}\n\nexport type ApiRate = {\n  code: string\n  mid: number\n  currency: string\n  table: AvailableTables\n}\n\nexport type CurrencyHistoryData = {\n  code: string\n  table: AvailableTables\n}\n\nexport type AvailableTables = 'A' | 'B' | 'C'\ntype SelectedValue = ApiRate | undefined\n\nexport const Dashboard: React.FC<Props> = ({ rates, date, dataReady }) => {\n  const { t } = useTranslation()\n\n  const [fromCurrency, setFromCurrency] = useState('')\n  const [toCurrency, setToCurrency] = useState('')\n  const [userValue, setUserValue] = useState<string>('0')\n  const [converterValue, setConvertedValue] = useState<string>('')\n  const [exchangeRate, setExchangeRate] = useState(0)\n  const [selectedCurrencies, setSelectedCurrencies] = useState<CurrencyHistoryData[]>([])\n  const [isDashboardComponentActive, setDashboardComponentActive] = useState<boolean>(true)\n  const [isHistoryComponentActive, setHistoryComponentActive] = useState<boolean>(false)\n\n  useEffect(() => {\n    setInitialCurrencies(rates)\n  }, [rates])\n\n  useEffect(() => {\n    const firstValue: SelectedValue = rates.find((rate) => rate.code === fromCurrency)\n    const secondValue: SelectedValue = rates.find((rate) => rate.code === toCurrency)\n\n    if (firstValue && secondValue) {\n      setExchangeRate(firstValue.mid / secondValue.mid)\n      setConvertedValue((getParsedNumber(userValue) * exchangeRate).toFixed(2).toString())\n      setSelectedCurrencies([\n        { code: firstValue.code, table: firstValue.table } as CurrencyHistoryData,\n        { code: secondValue.code, table: secondValue.table } as CurrencyHistoryData,\n      ])\n    }\n  }, [rates, fromCurrency, toCurrency, userValue, exchangeRate])\n\n  const onChangeValue = (inputElement: React.ChangeEvent<HTMLInputElement>) => {\n    const value: string = inputElement.target.value\n\n    if (!value) {\n      setUserValue('0')\n    } else if (userInputRegex.test(value)) {\n      setUserValue(getParsedNumber(value) >= 1 ? value.replace(/^0+/, '') : value)\n    }\n  }\n\n  const onCurrencySwap = () => {\n    const temporaryFromCurrencyKeeper = fromCurrency\n    setFromCurrency(toCurrency)\n    setToCurrency(temporaryFromCurrencyKeeper)\n  }\n\n  const setInitialCurrencies = (rates: ApiRate[]) => {\n    setFromCurrency(findAndReturnCurrencyByCode(rates, initialSelectFromValue))\n    setToCurrency(findAndReturnCurrencyByCode(rates, initialSelectToValue))\n  }\n\n  const onGoToHistoryButtonClick = () => {\n    switchView(false, true)\n  }\n\n  const switchView = (setDashboardActive: boolean, setHistoryActive: boolean) => {\n    setDashboardComponentActive(setDashboardActive)\n    setHistoryComponentActive(setHistoryActive)\n  }\n\n  return (\n    <div>\n      {isDashboardComponentActive && (\n        <div className=\"converter cc-container\">\n          <Helmet>\n            <title>CConverter - {t('DashboardHelmetTitle')}</title>\n          </Helmet>\n\n          <div className=\"converter__info\">\n            <div className=\"converter__info__content\">\n              <Trans i18nKey=\"DashboardSectionInfo\" components={{ paragraph: <p />, bold: <strong /> }}>\n                <p>\n                  Calculations are based on latest data provided by the <strong>National Bank of Poland</strong>.\n                </p>\n                <p>Values presented on the website form median of representative currencies.</p>\n              </Trans>\n              <p>\n                <Trans i18nKey=\"DashboardSectionDate\" values={{ date: date }}>\n                  Last update: {date}\n                </Trans>\n              </p>\n            </div>\n          </div>\n\n          <div className=\"converter__calc__shadow\" />\n\n          <div className=\"converter__calc\">\n            <h2 className=\"converter__calc__header\">{t('ConvertCurrencyCalculatorHeader')}</h2>\n            <Spin spinning={!dataReady} delay={10}>\n              <div className=\"converter__calc__group\">\n                <CurrencySelect\n                  value={fromCurrency}\n                  name=\"fromCurrency\"\n                  currencyRates={rates}\n                  disabled={!dataReady}\n                  onChange={setFromCurrency}\n                />\n                <label htmlFor=\"inputValue\" className=\"sr-only\">\n                  Input Value\n                </label>\n                <Input\n                  placeholder={inputPlaceholder}\n                  value={userValue}\n                  id=\"inputValue\"\n                  disabled={!dataReady}\n                  onChange={onChangeValue}\n                />\n              </div>\n\n              <div className=\"buttons\">\n                <Button\n                  type=\"primary\"\n                  className=\"btn-swap cc-btn--gradient\"\n                  disabled={!fromCurrency || !toCurrency}\n                  onClick={onCurrencySwap}\n                >\n                  <SwapOutlined rotate={90} className=\"btn-swap-icon\" />\n                </Button>\n\n                <Button type=\"primary\" className=\"btn-chart cc-btn--gradient\" onClick={onGoToHistoryButtonClick}>\n                  <LineChartOutlined className=\"btn-chart-icon\" />\n                  <span>{exchangeRate.toFixed(5)}</span>\n                </Button>\n              </div>\n\n              <div className=\"converter__calc__group\">\n                <CurrencySelect\n                  value={toCurrency}\n                  name=\"toCurrency\"\n                  currencyRates={rates}\n                  disabled={!dataReady}\n                  onChange={setToCurrency}\n                />\n                <label htmlFor=\"outputValue\" className=\"sr-only\">\n                  Output Value\n                </label>\n                <Input placeholder={inputPlaceholder} id=\"outputValue\" value={converterValue} />\n              </div>\n            </Spin>\n          </div>\n        </div>\n      )}\n      {isHistoryComponentActive && (\n        <ExchangeRateHistoryComponent selectedCurrencies={selectedCurrencies} backToDashboard={switchView} />\n      )}\n    </div>\n  )\n}\n\nconst findAndReturnCurrencyByCode = (rates: ApiRate[], currencyCode: string) => {\n  return rates.find((rate) => rate.code === currencyCode)?.code || ''\n}\n","export const inputPlaceholder = '0'\nexport const initialSelectFromValue = 'USD'\nexport const initialSelectToValue = 'EUR'\n","import React from 'react'\n\nimport { useCurrenciesFetch } from '../../services/currencyService'\n\nimport { Dashboard } from './dashboard'\n\nexport const DashboardContainer: React.FC = () => {\n  const { rates, date } = useCurrenciesFetch()\n\n  return <Dashboard rates={rates} date={date} dataReady={!!rates.length} />\n}\n","export const gtagID = process.env.REACT_APP_GA_MEASUREMENT_ID\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\ntype Props = {\n  gtag: string\n}\n\n// TODO: https://github.com/nfl/react-helmet/issues/342\n// Export to new component due to inability of using Fragments inside Helmet\nexport const GoogleAnalytics = ({ gtag }: Props): JSX.Element => {\n  return (\n    <Helmet>\n      <script async src={`https://www.googletagmanager.com/gtag/js?id=${gtag}`} />\n      <script>\n        {`\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n\n          gtag('config', '${gtag}');\n        `}\n      </script>\n    </Helmet>\n  )\n}\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Layout } from 'antd'\n\nimport { About } from './components/about/about'\nimport { Contact } from './components/contact/contact'\nimport { NotFoundPage } from './components/notFoundPage/notFoundPage'\nimport { MainHeader } from './components/mainHeader/mainHeader'\nimport { DashboardContainer } from './components/dashboard/dashboard.container'\nimport { gtagID } from './constants/googleAnalytics'\nimport { GoogleAnalytics } from './components/googleAnalytics/googleAnalytics'\n\nimport './App.scss'\n\nconst { Header, Content } = Layout\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"cc-theme-purple\">\n      {gtagID && <GoogleAnalytics gtag={gtagID} />}\n      <Router basename={process.env.PUBLIC_URL}>\n        <Layout className=\"main-layout\">\n          <Header className=\"main-layout__header\">\n            <MainHeader />\n          </Header>\n\n          <Switch>\n            <Route exact path=\"/\">\n              <Content className=\"main-layout__content\">\n                <DashboardContainer />\n              </Content>\n            </Route>\n\n            <Route path=\"/about\">\n              <Content className=\"main-layout__content\">\n                <About />\n              </Content>\n            </Route>\n\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n\n            <Route path=\"*\">\n              <NotFoundPage />\n            </Route>\n          </Switch>\n        </Layout>\n      </Router>\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            whenWorkerInstalled(registration, config)\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction whenWorkerInstalled(registration: ServiceWorkerRegistration, config?: Config): void {\n  if (navigator.serviceWorker.controller) {\n    // At this point, the updated precached content has been fetched,\n    // but the previous service worker will still serve the older\n    // content until all client tabs are closed.\n    // eslint-disable-next-line no-console\n    console.log(\n      'New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n    )\n\n    // Execute callback\n    if (config && config.onUpdate) {\n      config.onUpdate(registration)\n    }\n  } else {\n    // At this point, everything has been precached.\n    // It's the perfect time to display a\n    // \"Content is cached for offline use.\" message.\n    // eslint-disable-next-line no-console\n    console.log('Content is cached for offline use.')\n\n    // Execute callback\n    if (config && config.onSuccess) {\n      config.onSuccess(registration)\n    }\n  }\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nimport translationEN from './translations/en.json'\nimport translationPL from './translations/pl.json'\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  pl: {\n    translation: translationPL,\n  },\n}\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'pl',\n    fallbackLng: 'en',\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  })\n\n// eslint-disable-next-line import/no-default-export\nexport default i18n\n","import React from 'react'\nimport { render, hydrate } from 'react-dom'\n\nimport { App } from 'App'\n\nimport * as serviceWorker from './serviceWorker'\nimport './i18n'\n\nimport './styles/styles.scss'\n\nconst rootElement = document.getElementById('root')\nrootElement && rootElement.hasChildNodes() ? hydrate(<App />, rootElement) : render(<App />, rootElement)\n\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormSent\":\"contactFormSent_contactFormSent__3r5Hl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFound\":\"notFoundPage_notFound__3dF1h\",\"notFound__info\":\"notFoundPage_notFound__info__18zxH\",\"notFound__header\":\"notFoundPage_notFound__header__1mmvq\",\"notFound__description\":\"notFoundPage_notFound__description__1dx_I\",\"notFound__path\":\"notFoundPage_notFound__path__1QK4-\",\"notFound__img\":\"notFoundPage_notFound__img__2JDIy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"historyRate\":\"exchangeRateHistory_historyRate__2SWb5\",\"periodButtons\":\"exchangeRateHistory_periodButtons__3PslJ\",\"monthButton\":\"exchangeRateHistory_monthButton__tATSM\",\"active\":\"exchangeRateHistory_active__2Iq0L\",\"backToDashboard\":\"exchangeRateHistory_backToDashboard__2OKUX\"};"],"sourceRoot":""}